-- =========================================================
-- KEEPWELL → BET_FILES → BET_Extract_Dim_copy (SCD2, hardened)
-- =========================================================

-- ---------- RUNTIME VARS ----------
DECLARE NewTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP();
DECLARE System_Begin_Timestamp TIMESTAMP DEFAULT NewTime;
DECLARE System_End_Timestamp   TIMESTAMP DEFAULT TIMESTAMP '9999-12-31 23:59:59 UTC';
DECLARE CRI INT64 DEFAULT 1;  -- Current_Record_Ind
DECLARE RDI INT64 DEFAULT 0;  -- Record_Delete_Ind

-- ---------- NAMED VALUES (no @parameters) ----------
DECLARE Var_PRCS_ID      STRING DEFAULT 'RUN_ADHOC';
DECLARE Var_Process_Name STRING DEFAULT 'BET_KeepWell_SCD2';
DECLARE v_extract_name   STRING DEFAULT 'KeepWell';

-- ---------- TABLES ----------
-- (hardcoded for dev-edap; change here if needed)
DECLARE v_stage_keepwell STRING DEFAULT 'dev-edap.BET_STAGE.BET_KeepWell_copy';
DECLARE v_files_table    STRING DEFAULT 'dev-edap.BET_DIST.BET_Files';
DECLARE v_target_table   STRING DEFAULT 'dev-edap.BET_DIST.BET_Extract_Dim_copy';

-- ---------- SWITCHES ----------
DECLARE v_do_backfill_once   BOOL DEFAULT FALSE;  -- one-time Stage → BET_Files load
DECLARE v_do_zero_rows_alert BOOL DEFAULT TRUE;   -- alert if no rows today in BET_Files

-- ---------- WORK VARS ----------
DECLARE dup_curr INT64;
DECLARE suspicious INT64;
DECLARE todays_rows INT64;

-- ---------- HELPERS ----------
CREATE TEMP FUNCTION canon_str(s STRING, underscore BOOL)
RETURNS STRING AS (
  IF(s IS NULL, NULL,
     IF(underscore,
        REGEXP_REPLACE(REGEXP_REPLACE(TRIM(s), r'\s+', ' '), r' ', '_'),
        REGEXP_REPLACE(TRIM(s), r'\s+', ' ')
     )
  )
);

-- =========================================================
-- A) (OPTIONAL) ONE-TIME BACKFILL INTO BET_Files
-- =========================================================
IF v_do_backfill_once THEN
  INSERT INTO `dev-edap.BET_DIST.BET_Files`
  (
    RECORDDATA, Sys_Of_Rec_Cd, Src_Sys_Cd, Audit_Row_Id, Prcs_Id,
    Crt_Rec_Sys_Tms, Upd_Rec_Sys_Tms, Crt_Rec_Prcs_Nme, Upd_Rec_Prcs_Nme,
    Crt_Rec_Usr_Nme, Upd_Rec_Usr_Nme, Bus_Dt
  )
  SELECT
    ARRAY_AGG(STRUCT(
      canon_str(rd.column_name, TRUE) AS column_name,
      CASE
        WHEN rd.column_name IN ('Client','PrimeBenefitPlanCode','PrimeBenefitPlanStatus','ExtractName')
          THEN canon_str(rd.column_value, TRUE)
        ELSE rd.column_value
      END AS column_value,
      rd.data_type
    )
    ORDER BY canon_str(rd.column_name, TRUE), rd.data_type) AS RECORDDATA,
    src.Sys_Of_Rec_Cd, src.Src_Sys_Cd, src.Audit_Row_Id, Var_PRCS_ID,
    NewTime, NewTime, Var_Process_Name, Var_Process_Name,
    SESSION_USER(), SESSION_USER(), src.Bus_Dt
  FROM `dev-edap.BET_STAGE.BET_KeepWell_copy` src, UNNEST(src.RECORDDATA) rd
  GROUP BY 2,3,4,12;
END IF;

-- =========================================================
-- B) SAFETY ALERT: ENSURE TODAY’S ROWS EXIST IN BET_Files
-- =========================================================
IF v_do_zero_rows_alert THEN
  SET todays_rows = (SELECT COUNT(*) FROM `dev-edap.BET_DIST.BET_Files` WHERE Bus_Dt = CURRENT_DATE());
  IF todays_rows = 0 THEN
    RAISE USING MESSAGE = 'ALERT: KeepWell → BET_Files has 0 rows for today.';
  END IF;
END IF;

-- =========================================================
-- C) RN FROM BET_Files
-- =========================================================
CREATE TEMP TABLE BET_RN AS
SELECT
  a.*,
  ROW_NUMBER() OVER (ORDER BY a.Prcs_Id, a.Audit_Row_Id, a.Crt_Rec_Sys_Tms, a.Upd_Rec_Sys_Tms) AS RN
FROM `dev-edap.BET_DIST.BET_Files` a;

-- =========================================================
-- D) UNNEST FOR TARGET FIELDS (remove Data_Type for pivot)
-- =========================================================
CREATE TEMP TABLE BET_UN AS
SELECT
  a.Sys_Of_Rec_Cd,
  a.Src_Sys_Cd,
  a.Audit_Row_Id,
  a.Prcs_Id,
  a.Crt_Rec_Sys_Tms,
  a.Upd_Rec_Sys_Tms,
  a.Crt_Rec_Prcs_Nme,
  a.Upd_Rec_Prcs_Nme,
  a.Crt_Rec_Usr_Nme,
  a.Upd_Rec_Usr_Nme,
  a.Bus_Dt,
  a.RN,
  b.column_name,
  b.column_value
FROM BET_RN a
CROSS JOIN UNNEST(a.RECORDDATA) b
WHERE b.column_name IN (
  'Client','PrimeBenefitPlanCode','PrimeBenefitMasterPlanID','PrimeBenefitPlanID',
  'PlanEffectiveDate','ChangeEffectiveDate','PrimeBenefitPlanStatus','CertifiedDate'
);

-- =========================================================
-- E) PIVOT BACK TO WIDE + APPLY Extract_Name
-- =========================================================
CREATE TEMP TABLE BET_PV AS
SELECT
  v_extract_name AS Extract_Name,
  ANY_VALUE(Sys_Of_Rec_Cd) AS Sys_Of_Rec_Cd,
  ANY_VALUE(Src_Sys_Cd)    AS Src_Sys_Cd,
  ANY_VALUE(Audit_Row_Id)  AS Audit_Row_Id,
  ANY_VALUE(Prcs_Id)       AS Prcs_Id,
  ANY_VALUE(Crt_Rec_Sys_Tms) AS Crt_Rec_Sys_Tms,
  ANY_VALUE(Upd_Rec_Sys_Tms) AS Upd_Rec_Sys_Tms,
  ANY_VALUE(Crt_Rec_Prcs_Nme) AS Crt_Rec_Prcs_Nme,
  ANY_VALUE(Upd_Rec_Prcs_Nme) AS Upd_Rec_Prcs_Nme,
  ANY_VALUE(Crt_Rec_Usr_Nme)  AS Crt_Rec_Usr_Nme,
  ANY_VALUE(Upd_Rec_Usr_Nme)  AS Upd_Rec_Usr_Nme,
  ANY_VALUE(Bus_Dt)           AS Bus_Dt,

  SAFE_CAST(MAX(IF(column_name='PlanEffectiveDate',   column_value, NULL)) AS DATE)  AS PlanEffectiveDate,
  SAFE_CAST(MAX(IF(column_name='ChangeEffectiveDate', column_value, NULL)) AS DATE)  AS ChangeEffectiveDate,
  SAFE_CAST(MAX(IF(column_name='CertifiedDate',       column_value, NULL)) AS DATE)  AS CertifiedDate,

  MAX(IF(column_name='Client',                   column_value, NULL))                 AS Client,
  MAX(IF(column_name='PrimeBenefitPlanCode',     column_value, NULL))                 AS PrimeBenefitPlanCode,
  SAFE_CAST(MAX(IF(column_name='PrimeBenefitMasterPlanID', column_value, NULL)) AS INT64) AS PrimeBenefitMasterPlanID,
  SAFE_CAST(MAX(IF(column_name='PrimeBenefitPlanID',       column_value, NULL)) AS INT64) AS PrimeBenefitPlanID,
  MAX(IF(column_name='PrimeBenefitPlanStatus',   column_value, NULL))                 AS PrimeBenefitPlanStatus,

  RN
FROM BET_UN
GROUP BY RN
ORDER BY RN;

-- =========================================================
-- F) BUILD CANONICAL RECORDDATA & HASH (normalized + ordered)
-- =========================================================
CREATE TEMP TABLE BETSRC AS
WITH shaped AS (
  SELECT
    -- keys / dims (normalize strings for stability)
    PrimeBenefitPlanID                                AS Prime_Benefit_Plan_ID,
    PrimeBenefitMasterPlanID                          AS Prime_Benefit_Master_Plan_ID,
    canon_str(PrimeBenefitPlanCode,   TRUE)           AS Prime_Benefit_Plan_Code,
    canon_str(PrimeBenefitPlanStatus, TRUE)           AS Prime_Benefit_Plan_Status,
    PlanEffectiveDate                                 AS Plan_Effective_Date,
    ChangeEffectiveDate                               AS Change_Effective_Date,
    CertifiedDate                                     AS Certified_Date,

    canon_str(Extract_Name, TRUE)                     AS Extract_Name,
    canon_str(Client, TRUE)                           AS Client,

    Sys_Of_Rec_Cd,
    Src_Sys_Cd,
    Audit_Row_Id,

    CAST(RDI AS INT64) AS Record_Delete_Ind,
    CAST(CRI AS INT64) AS Current_Record_Ind,
    System_Begin_Timestamp AS Record_Effective_Begin_Timestamp,
    System_End_Timestamp   AS Record_Effective_End_Timestamp,

    Var_PRCS_ID            AS Prcs_Id,
    NewTime                AS Crt_Rec_Sys_Tms,
    Var_Process_Name       AS Crt_Rec_Prcs_Nme,
    NewTime                AS Upd_Rec_Sys_Tms,
    Var_Process_Name       AS Upd_Rec_Prcs_Nme,
    NULL                   AS Crt_Rec_Usr_Nme,
    SESSION_USER()         AS Upd_Rec_Usr_Nme,
    Bus_Dt,

    -- RECORDDATA normalized + stable order
    ARRAY(
      SELECT AS STRUCT column_name, column_value, data_type
      FROM (
        SELECT 'Client',                  canon_str(Client, TRUE),                 'STRING' UNION ALL
        SELECT 'PrimeBenefitPlanCode',    canon_str(PrimeBenefitPlanCode, TRUE),   'STRING' UNION ALL
        SELECT 'PrimeBenefitMasterPlanID',CAST(PrimeBenefitMasterPlanID AS STRING),'INT64'  UNION ALL
        SELECT 'PrimeBenefitPlanID',      CAST(PrimeBenefitPlanID AS STRING),      'INT64'  UNION ALL
        SELECT 'PlanEffectiveDate',       CAST(PlanEffectiveDate AS STRING),       'DATE'   UNION ALL
        SELECT 'ChangeEffectiveDate',     CAST(ChangeEffectiveDate AS STRING),     'DATE'   UNION ALL
        SELECT 'PrimeBenefitPlanStatus',  canon_str(PrimeBenefitPlanStatus, TRUE), 'STRING' UNION ALL
        SELECT 'CertifiedDate',           CAST(CertifiedDate AS STRING),           'DATE'
      )
      WHERE column_value IS NOT NULL AND TRIM(column_value) <> ''
      ORDER BY column_name, data_type
    ) AS RECORDDATA
  FROM BET_PV
),
hashed AS (
  SELECT
    s.*,
    TO_HEX(SHA256(CONCAT(
      COALESCE(CAST(Prime_Benefit_Plan_ID        AS STRING),''),'||',
      COALESCE(CAST(Prime_Benefit_Master_Plan_ID AS STRING),''),'||',
      COALESCE(Prime_Benefit_Plan_Code,''),'||',
      COALESCE(Prime_Benefit_Plan_Status,''),'||',
      COALESCE(CAST(Plan_Effective_Date          AS STRING),''),'||',
      COALESCE(CAST(Change_Effective_Date        AS STRING),''),'||',
      COALESCE(CAST(Certified_Date               AS STRING),''),'||',
      COALESCE(Extract_Name,''),'||',
      TO_JSON_STRING(s.RECORDDATA)
    ))) AS Hash_Key
  FROM shaped s
)
SELECT CAST(NULL AS INT64) AS PK1, h.* FROM hashed h;

-- =========================================================
-- G) SANITY CHECKS
-- =========================================================
SET dup_curr = (
  SELECT COUNT(*) FROM (
    SELECT Prime_Benefit_Plan_ID, Prime_Benefit_Master_Plan_ID, COUNTIF(Current_Record_Ind=1) c
    FROM `dev-edap.BET_DIST.BET_Extract_Dim_copy`
    GROUP BY 1,2 HAVING c > 1
  )
);
IF dup_curr > 0 THEN
  RAISE USING MESSAGE = 'Collision: more than one CURRENT row per natural key in target.';
END IF;

SET suspicious = (
  WITH t AS (
    SELECT Prime_Benefit_Plan_ID, Prime_Benefit_Master_Plan_ID, Hash_Key,
           TO_JSON_STRING(RECORDDATA) rd_json
    FROM `dev-edap.BET_DIST.BET_Extract_Dim_copy`
  )
  SELECT COUNT(*) FROM (
    SELECT Prime_Benefit_Plan_ID, Prime_Benefit_Master_Plan_ID, Hash_Key, COUNT(DISTINCT rd_json) d
    FROM t
    GROUP BY 1,2,3
    HAVING d > 1
  )
);
IF suspicious > 0 THEN
  RAISE USING MESSAGE = 'Hash collision suspicion: same hash with differing RECORDDATA.';
END IF;

-- =========================================================
-- H) SCD2 MERGE
-- =========================================================
MERGE `dev-edap.BET_DIST.BET_Extract_Dim_copy` AS TRG
USING (
  SELECT TRG.BET_Extract_Dim_ID AS PK1, SRC.*
  FROM `dev-edap.BET_DIST.BET_Extract_Dim_copy` TRG
  JOIN BETSRC SRC
    ON TRG.Prime_Benefit_Plan_ID        = SRC.Prime_Benefit_Plan_ID
   AND TRG.Prime_Benefit_Master_Plan_ID = SRC.Prime_Benefit_Master_Plan_ID
   AND TRG.Current_Record_Ind = 1
   AND DATE(TRG.Record_Effective_End_Timestamp) = DATE '9999-12-31'
  UNION ALL
  SELECT NULL AS PK1, SRC.* FROM BETSRC SRC
) SRC
ON TRG.BET_Extract_Dim_ID = SRC.PK1

WHEN MATCHED AND (
     TRG.Hash_Key          <> SRC.Hash_Key
  OR TRG.Record_Delete_Ind <> SRC.Record_Delete_Ind
) THEN
  UPDATE SET
    TRG.Record_Effective_End_Timestamp = NewTime,
    TRG.Current_Record_Ind             = 0,
    TRG.Upd_Rec_Sys_Tms                = NewTime,
    TRG.Upd_Rec_Prcs_Nme               = Var_Process_Name,
    TRG.Upd_Rec_Usr_Nme                = SESSION_USER()

WHEN NOT MATCHED THEN
  INSERT (
    BET_Extract_Dim_ID,
    Record_Effective_Begin_Timestamp,
    Record_Effective_End_Timestamp,
    Current_Record_Ind,
    Record_Delete_Ind,
    Prime_Benefit_Plan_ID,
    Extract_Name,
    Client,
    Prime_Benefit_Plan_Code,
    Prime_Benefit_Master_Plan_ID,
    Prime_Benefit_Plan_Status,
    Plan_Effective_Date,
    Change_Effective_Date,
    Certified_Date,
    RECORDDATA,
    Sys_Of_Rec_Cd,
    Src_Sys_Cd,
    Audit_Row_Id,     -- lineage only
    Prcs_Id,
    Crt_Rec_Sys_Tms,
    Crt_Rec_Prcs_Nme,
    Upd_Rec_Sys_Tms,
    Upd_Rec_Prcs_Nme,
    Crt_Rec_Usr_Nme,
    Upd_Rec_Usr_Nme,
    Bus_Dt,
    Hash_Key
  )
  VALUES (
    GENERATE_UUID(),
    SRC.Record_Effective_Begin_Timestamp,
    SRC.Record_Effective_End_Timestamp,
    SRC.Current_Record_Ind,
    SRC.Record_Delete_Ind,
    SRC.Prime_Benefit_Plan_ID,
    SRC.Extract_Name,
    SRC.Client,
    SRC.Prime_Benefit_Plan_Code,
    SRC.Prime_Benefit_Master_Plan_ID,
    SRC.Prime_Benefit_Plan_Status,
    SRC.Plan_Effective_Date,
    SRC.Change_Effective_Date,
    SRC.Certified_Date,
    SRC.RECORDDATA,
    SRC.Sys_Of_Rec_Cd,
    SRC.Src_Sys_Cd,
    SRC.Audit_Row_Id,
    SRC.Prcs_Id,
    SRC.Crt_Rec_Sys_Tms,
    Var_Process_Name,
    SRC.Upd_Rec_Sys_Tms,
    Var_Process_Name,
    SRC.Crt_Rec_Usr_Nme,
    SRC.Upd_Rec_Usr_Nme,
    SRC.Bus_Dt,
    SRC.Hash_Key
  );
