-- =====================================================================
-- DAILY APPEND-ONLY LOAD + AUDIT (no failure on zero)
--   KeepWell  -> Files_Dhan (RECORDDATA)
--   Files_Dhan -> Extract_Dim_Dhan (pivot back to flat)
-- =====================================================================

-- One-time DDLs (safe to keep at top)
CREATE TABLE IF NOT EXISTS `dev-edap.BET_DIST.BET_Files_Dhan_Load_Audit` (
  run_ts               TIMESTAMP,
  watermark_before     TIMESTAMP,
  rows_detected_delta  INT64,
  rows_inserted        INT64,
  status               STRING,   -- 'SUCCESS' | 'ZERO_DELTA'
  note                 STRING
)
PARTITION BY DATE(run_ts);

CREATE TABLE IF NOT EXISTS `dev-edap.BET_DIST.BET_Extract_Dim_Dhan_Load_Audit` (
  run_ts               TIMESTAMP,
  watermark_before     TIMESTAMP,
  rows_detected_delta  INT64,
  rows_inserted        INT64,
  status               STRING,   -- 'SUCCESS' | 'ZERO_DELTA'
  note                 STRING
)
PARTITION BY DATE(run_ts);

-- ---------------------------------------------------------------------
-- VARIABLES
-- ---------------------------------------------------------------------
DECLARE run_ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP();

-- Hop 1 (KeepWell -> Files_Dhan)
DECLARE wm_files_before TIMESTAMP;
DECLARE files_rows_delta INT64 DEFAULT 0;
DECLARE files_rows_inserted INT64 DEFAULT 0;

-- Hop 2 (Files_Dhan -> Extract_Dim_Dhan)
DECLARE wm_extract_before TIMESTAMP;
DECLARE extract_rows_delta INT64 DEFAULT 0;
DECLARE extract_rows_inserted INT64 DEFAULT 0;

-- Current watermarks
SET wm_files_before = IFNULL((
  SELECT MAX(COALESCE(Upd_Rec_Sys_Tms, Crt_Rec_Sys_Tms))
  FROM `dev-edap.BET_DIST.BET_Files_Dhan`
), TIMESTAMP '1970-01-01 00:00:00');

SET wm_extract_before = IFNULL((
  SELECT MAX(COALESCE(Upd_Rec_Sys_Tms, Crt_Rec_Sys_Tms))
  FROM `dev-edap.BET_DIST.BET_Extract_Dim_Dhan`
), TIMESTAMP '1970-01-01 00:00:00');

-- =====================================================================
-- HOP 1: KeepWell -> Files_Dhan (APPEND-ONLY)
-- =====================================================================

-- Source rows newer than Files' watermark
CREATE TEMP TABLE _src_keepwell AS
SELECT k.*
FROM `dev-edap.BET_STAGE.BET_KeepWell` k
WHERE COALESCE(k.Upd_Rec_Sys_Tms, k.Crt_Rec_Sys_Tms) > wm_files_before;

-- Build RECORDDATA for those rows
CREATE TEMP TABLE _pairs_files AS
SELECT
  ARRAY_CONCAT(
    -- strings
    ARRAY(SELECT AS STRUCT 'Client', CAST(Client AS STRING), 'STRING' WHERE Client IS NOT NULL AND CAST(Client AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Prime_Benefit_Plan_Code', CAST(Prime_Benefit_Plan_Code AS STRING), 'STRING' WHERE Prime_Benefit_Plan_Code IS NOT NULL AND CAST(Prime_Benefit_Plan_Code AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Prime_Benefit_Master_Plan_ID', CAST(Prime_Benefit_Master_Plan_ID AS STRING), 'STRING' WHERE Prime_Benefit_Master_Plan_ID IS NOT NULL AND CAST(Prime_Benefit_Master_Plan_ID AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Prime_Benefit_Plan_ID', CAST(Prime_Benefit_Plan_ID AS STRING), 'STRING' WHERE Prime_Benefit_Plan_ID IS NOT NULL AND CAST(Prime_Benefit_Plan_ID AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Plan_Name', CAST(Plan_Name AS STRING), 'STRING' WHERE Plan_Name IS NOT NULL AND CAST(Plan_Name AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Template_Name', CAST(Template_Name AS STRING), 'STRING' WHERE Template_Name IS NOT NULL AND CAST(Template_Name AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Template_Version', CAST(Template_Version AS STRING), 'STRING' WHERE Template_Version IS NOT NULL AND CAST(Template_Version AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Alternative_Plan_Code', CAST(Alternative_Plan_Code AS STRING), 'STRING' WHERE Alternative_Plan_Code IS NOT NULL AND CAST(Alternative_Plan_Code AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Supplemental_Plan_Code', CAST(Supplemental_Plan_Code AS STRING), 'STRING' WHERE Supplemental_Plan_Code IS NOT NULL AND CAST(Supplemental_Plan_Code AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Carrier', CAST(Carrier AS STRING), 'STRING' WHERE Carrier IS NOT NULL AND CAST(Carrier AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Account', CAST(Account AS STRING), 'STRING' WHERE Account IS NOT NULL AND CAST(Account AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Copay_Load_Level', CAST(Copay_Load_Level AS STRING), 'STRING' WHERE Copay_Load_Level IS NOT NULL AND CAST(Copay_Load_Level AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'MLB_Program_ID', CAST(MLB_Program_ID AS STRING), 'STRING' WHERE MLB_Program_ID IS NOT NULL AND CAST(MLB_Program_ID AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Prime_Formulary_ID', CAST(Prime_Formulary_ID AS STRING), 'STRING' WHERE Prime_Formulary_ID IS NOT NULL AND CAST(Prime_Formulary_ID AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Priority', CAST(Priority AS STRING), 'STRING' WHERE Priority IS NOT NULL AND CAST(Priority AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Complexity', CAST(Complexity AS STRING), 'STRING' WHERE Complexity IS NOT NULL AND CAST(Complexity AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Test_Carrier', CAST(Test_Carrier AS STRING), 'STRING' WHERE Test_Carrier IS NOT NULL AND CAST(Test_Carrier AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Test_Account', CAST(Test_Account AS STRING), 'STRING' WHERE Test_Account IS NOT NULL AND CAST(Test_Account AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Test_Group', CAST(Test_Group AS STRING), 'STRING' WHERE Test_Group IS NOT NULL AND CAST(Test_Group AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Test_MemberID', CAST(Test_MemberID AS STRING), 'STRING' WHERE Test_MemberID IS NOT NULL AND CAST(Test_MemberID AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Formulary_Marketing_Name', CAST(Formulary_Marketing_Name AS STRING), 'STRING' WHERE Formulary_Marketing_Name IS NOT NULL AND CAST(Formulary_Marketing_Name AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Network_Marketing_Name', CAST(Network_Marketing_Name AS STRING), 'STRING' WHERE Network_Marketing_Name IS NOT NULL AND CAST(Network_Marketing_Name AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Prime_Benefit_Plan_Status', CAST(Prime_Benefit_Plan_Status AS STRING), 'STRING' WHERE Prime_Benefit_Plan_Status IS NOT NULL AND CAST(Prime_Benefit_Plan_Status AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Column_Name', CAST(Column_Name AS STRING), 'STRING' WHERE Column_Name IS NOT NULL AND CAST(Column_Name AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Column_Value', CAST(Column_Value AS STRING), 'STRING' WHERE Column_Value IS NOT NULL AND CAST(Column_Value AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Sys_Of_Rec_Cd', CAST(Sys_Of_Rec_Cd AS STRING), 'STRING' WHERE Sys_Of_Rec_Cd IS NOT NULL AND CAST(Sys_Of_Rec_Cd AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Src_Sys_Cd', CAST(Src_Sys_Cd AS STRING), 'STRING' WHERE Src_Sys_Cd IS NOT NULL AND CAST(Src_Sys_Cd AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Row_Actn_Cd', CAST(Row_Actn_Cd AS STRING), 'STRING' WHERE Row_Actn_Cd IS NOT NULL AND CAST(Row_Actn_Cd AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Row_Reprcs_Flg', CAST(Row_Reprcs_Flg AS STRING), 'STRING' WHERE Row_Reprcs_Flg IS NOT NULL AND CAST(Row_Reprcs_Flg AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Row_Rej_Flg', CAST(Row_Rej_Flg AS STRING), 'STRING' WHERE Row_Rej_Flg IS NOT NULL AND CAST(Row_Rej_Flg AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Prcs_Id', CAST(Prcs_Id AS STRING), 'STRING' WHERE Prcs_Id IS NOT NULL AND CAST(Prcs_Id AS STRING) <> ''),
    ARRAY(SELECT AS STRUCT 'Audit_Row_Id', CAST(Audit_Row_Id AS STRING), 'STRING' WHERE Audit_Row_Id IS NOT NULL AND CAST(Audit_Row_Id AS STRING) <> ''),

    -- numerics
    ARRAY(SELECT AS STRUCT 'Plan_Version', CAST(Plan_Version AS STRING), 'NUMERIC' WHERE Plan_Version IS NOT NULL),

    -- dates (stored as strings; retyped during pivot)
    ARRAY(SELECT AS STRUCT 'Effective_Date', CAST(Effective_Date AS STRING), 'DATE' WHERE Effective_Date IS NOT NULL),
    ARRAY(SELECT AS STRUCT 'Plan_Effective_Date', CAST(Plan_Effective_Date AS STRING), 'DATE' WHERE Plan_Effective_Date IS NOT NULL),
    ARRAY(SELECT AS STRUCT 'Change_Effective_Date', CAST(Change_Effective_Date AS STRING), 'DATE' WHERE Change_Effective_Date IS NOT NULL),
    ARRAY(SELECT AS STRUCT 'Benefit_Plan_Start_Date', CAST(Benefit_Plan_Start_Date AS STRING), 'DATE' WHERE Benefit_Plan_Start_Date IS NOT NULL),
    ARRAY(SELECT AS STRUCT 'Create_Date', CAST(Create_Date AS STRING), 'DATE' WHERE Create_Date IS NOT NULL),
    ARRAY(SELECT AS STRUCT 'Submit_Date', CAST(Submit_Date AS STRING), 'DATE' WHERE Submit_Date IS NOT NULL),
    ARRAY(SELECT AS STRUCT 'Certified_Date', CAST(Certified_Date AS STRING), 'DATE' WHERE Certified_Date IS NOT NULL),
    ARRAY(SELECT AS STRUCT 'Bus_Dt', CAST(Bus_Dt AS STRING), 'DATE' WHERE Bus_Dt IS NOT NULL),

    -- keys
    ARRAY(SELECT AS STRUCT 'Hash_Key', CAST(Hash_Key AS STRING), 'STRING' WHERE Hash_Key IS NOT NULL)
  ) AS RECORDDATA,

  -- pass-through (not inside RECORDDATA)
  Sys_Of_Rec_Cd, Src_Sys_Cd, Audit_Row_Id, Prcs_Id,
  Crt_Rec_Sys_Tms, Upd_Rec_Sys_Tms, Bus_Dt
FROM _src_keepwell;

-- Count delta rows (for audit)
SET files_rows_delta = (SELECT COUNT(*) FROM _pairs_files);

-- Insert only if there are rows
INSERT INTO `dev-edap.BET_DIST.BET_Files_Dhan` (
  RECORDDATA, Sys_Of_Rec_Cd, Src_Sys_Cd, Audit_Row_Id, Prcs_Id,
  Crt_Rec_Sys_Tms, Upd_Rec_Sys_Tms, Bus_Dt
)
SELECT
  RECORDDATA, Sys_Of_Rec_Cd, Src_Sys_Cd, Audit_Row_Id, Prcs_Id,
  Crt_Rec_Sys_Tms, Upd_Rec_Sys_Tms, Bus_Dt
FROM _pairs_files
WHERE files_rows_delta > 0;

-- Track inserted rows
SET files_rows_inserted = files_rows_delta;

-- Audit row for Hop 1
INSERT INTO `dev-edap.BET_DIST.BET_Files_Dhan_Load_Audit`
SELECT
  run_ts,
  wm_files_before,
  files_rows_delta,
  files_rows_inserted,
  IF(files_rows_inserted > 0, 'SUCCESS', 'ZERO_DELTA') AS status,
  IF(files_rows_inserted > 0, NULL, 'No new rows since last watermark') AS note;

-- =====================================================================
-- HOP 2: Files_Dhan -> Extract_Dim_Dhan (APPEND-ONLY + PIVOT)
-- =====================================================================

-- Fresh rows in Files_Dhan newer than Extract's watermark
CREATE TEMP TABLE _fresh_files AS
SELECT *
FROM `dev-edap.BET_DIST.BET_Files_Dhan`
WHERE COALESCE(Upd_Rec_Sys_Tms, Crt_Rec_Sys_Tms) > wm_extract_before;

-- Explode RECORDDATA
CREATE TEMP TABLE _kv AS
SELECT
  f.* EXCEPT(RECORDDATA),
  rd.Column_Name,
  rd.Column_Value
FROM _fresh_files f, UNNEST(f.RECORDDATA) rd;

-- Pivot back to flat columns (sample includes all fields used above)
CREATE TEMP TABLE _p AS
SELECT
  -- strings
  MAX(IF(Column_Name='Client', Column_Value, NULL)) AS Client,
  MAX(IF(Column_Name='Prime_Benefit_Plan_Code', Column_Value, NULL)) AS Prime_Benefit_Plan_Code,
  MAX(IF(Column_Name='Prime_Benefit_Master_Plan_ID', Column_Value, NULL)) AS Prime_Benefit_Master_Plan_ID,
  MAX(IF(Column_Name='Prime_Benefit_Plan_ID', Column_Value, NULL)) AS Prime_Benefit_Plan_ID,
  MAX(IF(Column_Name='Plan_Name', Column_Value, NULL)) AS Plan_Name,
  MAX(IF(Column_Name='Template_Name', Column_Value, NULL)) AS Template_Name,
  MAX(IF(Column_Name='Template_Version', Column_Value, NULL)) AS Template_Version,
  MAX(IF(Column_Name='Alternative_Plan_Code', Column_Value, NULL)) AS Alternative_Plan_Code,
  MAX(IF(Column_Name='Supplemental_Plan_Code', Column_Value, NULL)) AS Supplemental_Plan_Code,
  MAX(IF(Column_Name='Carrier', Column_Value, NULL)) AS Carrier,
  MAX(IF(Column_Name='Account', Column_Value, NULL)) AS Account,
  MAX(IF(Column_Name='Copay_Load_Level', Column_Value, NULL)) AS Copay_Load_Level,
  MAX(IF(Column_Name='MLB_Program_ID', Column_Value, NULL)) AS MLB_Program_ID,
  MAX(IF(Column_Name='Prime_Formulary_ID', Column_Value, NULL)) AS Prime_Formulary_ID,
  MAX(IF(Column_Name='Priority', Column_Value, NULL)) AS Priority,
  MAX(IF(Column_Name='Complexity', Column_Value, NULL)) AS Complexity,
  MAX(IF(Column_Name='Test_Carrier', Column_Value, NULL)) AS Test_Carrier,
  MAX(IF(Column_Name='Test_Account', Column_Value, NULL)) AS Test_Account,
  MAX(IF(Column_Name='Test_Group', Column_Value, NULL)) AS Test_Group,
  MAX(IF(Column_Name='Test_MemberID', Column_Value, NULL)) AS Test_MemberID,
  MAX(IF(Column_Name='Formulary_Marketing_Name', Column_Value, NULL)) AS Formulary_Marketing_Name,
  MAX(IF(Column_Name='Network_Marketing_Name', Column_Value, NULL)) AS Network_Marketing_Name,
  MAX(IF(Column_Name='Prime_Benefit_Plan_Status', Column_Value, NULL)) AS Prime_Benefit_Plan_Status,
  MAX(IF(Column_Name='Column_Name', Column_Value, NULL)) AS Column_Name,
  MAX(IF(Column_Name='Column_Value', Column_Value, NULL)) AS Column_Value,
  MAX(IF(Column_Name='Sys_Of_Rec_Cd', Column_Value, NULL)) AS Sys_Of_Rec_Cd,
  MAX(IF(Column_Name='Src_Sys_Cd', Column_Value, NULL)) AS Src_Sys_Cd,
  MAX(IF(Column_Name='Row_Actn_Cd', Column_Value, NULL)) AS Row_Actn_Cd,
  MAX(IF(Column_Name='Row_Reprcs_Flg', Column_Value, NULL)) AS Row_Reprcs_Flg,
  MAX(IF(Column_Name='Row_Rej_Flg', Column_Value, NULL)) AS Row_Rej_Flg,
  MAX(IF(Column_Name='Prcs_Id', Column_Value, NULL)) AS Prcs_Id,
  MAX(IF(Column_Name='Audit_Row_Id', Column_Value, NULL)) AS Audit_Row_Id,
  MAX(IF(Column_Name='Hash_Key', Column_Value, NULL)) AS Hash_Key,

  -- numerics
  CAST(MAX(IF(Column_Name='Plan_Version', Column_Value, NULL)) AS NUMERIC) AS Plan_Version,

  -- dates
  SAFE_CAST(MAX(IF(Column_Name='Effective_Date', Column_Value, NULL)) AS DATE) AS Effective_Date,
  SAFE_CAST(MAX(IF(Column_Name='Plan_Effective_Date', Column_Value, NULL)) AS DATE) AS Plan_Effective_Date,
  SAFE_CAST(MAX(IF(Column_Name='Change_Effective_Date', Column_Value, NULL)) AS DATE) AS Change_Effective_Date,
  SAFE_CAST(MAX(IF(Column_Name='Benefit_Plan_Start_Date', Column_Value, NULL)) AS DATE) AS Benefit_Plan_Start_Date,
  SAFE_CAST(MAX(IF(Column_Name='Create_Date', Column_Value, NULL)) AS DATE) AS Create_Date,
  SAFE_CAST(MAX(IF(Column_Name='Submit_Date', Column_Value, NULL)) AS DATE) AS Submit_Date,
  SAFE_CAST(MAX(IF(Column_Name='Certified_Date', Column_Value, NULL)) AS DATE) AS Certified_Date,
  SAFE_CAST(MAX(IF(Column_Name='Bus_Dt', Column_Value, NULL)) AS DATE) AS Bus_Dt,

  -- carry-through system timestamps from Files row
  ANY_VALUE(Crt_Rec_Sys_Tms) AS Crt_Rec_Sys_Tms,
  ANY_VALUE(Upd_Rec_Sys_Tms) AS Upd_Rec_Sys_Tms
FROM _kv
GROUP BY Audit_Row_Id, Prcs_Id, Crt_Rec_Sys_Tms, Upd_Rec_Sys_Tms;

-- Deduplicate (defensive)
CREATE TEMP TABLE _to_insert_extract AS
SELECT *
FROM (
  SELECT p.*,
         ROW_NUMBER() OVER (
           PARTITION BY Hash_Key, Bus_Dt, Upd_Rec_Sys_Tms, Crt_Rec_Sys_Tms
           ORDER BY Upd_Rec_Sys_Tms DESC
         ) AS rn
  FROM _p p
)
WHERE rn = 1
AND NOT EXISTS (
  SELECT 1
  FROM `dev-edap.BET_DIST.BET_Extract_Dim_Dhan` t
  WHERE t.Hash_Key = Hash_Key
    AND t.Bus_Dt   = Bus_Dt
    AND COALESCE(t.Upd_Rec_Sys_Tms, t.Crt_Rec_Sys_Tms)
        = COALESCE(Upd_Rec_Sys_Tms, Crt_Rec_Sys_Tms)
);

-- Count and insert
SET extract_rows_delta = (SELECT COUNT(*) FROM _to_insert_extract);

INSERT INTO `dev-edap.BET_DIST.BET_Extract_Dim_Dhan` (
  Client, Prime_Benefit_Plan_Code, Prime_Benefit_Master_Plan_ID, Prime_Benefit_Plan_ID,
  Plan_Name, Plan_Version, Template_Name, Template_Version, Alternative_Plan_Code,
  Supplemental_Plan_Code, Effective_Date, Plan_Effective_Date, Change_Effective_Date,
  Carrier, Account, Copay_Load_Level, MLB_Program_ID, Prime_Formulary_ID, Priority, Complexity,
  Benefit_Plan_Start_Date, Test_Carrier, Test_Account, Test_Group, Test_MemberID,
  Formulary_Marketing_Name, Network_Marketing_Name, Prime_Benefit_Plan_Status,
  Create_Date, Submit_Date, Certified_Date, Column_Name, Column_Value,
  Sys_Of_Rec_Cd, Src_Sys_Cd, Crt_Rec_Sys_Tms, Upd_Rec_Sys_Tms,
  Row_Actn_Cd, Row_Reprcs_Flg, Row_Rej_Flg, Prcs_Id, Audit_Row_Id, Hash_Key, Bus_Dt
)
SELECT
  Client, Prime_Benefit_Plan_Code, Prime_Benefit_Master_Plan_ID, Prime_Benefit_Plan_ID,
  Plan_Name, Plan_Version, Template_Name, Template_Version, Alternative_Plan_Code,
  Supplemental_Plan_Code, Effective_Date, Plan_Effective_Date, Change_Effective_Date,
  Carrier, Account, Copay_Load_Level, MLB_Program_ID, Prime_Formulary_ID, Priority, Complexity,
  Benefit_Plan_Start_Date, Test_Carrier, Test_Account, Test_Group, Test_MemberID,
  Formulary_Marketing_Name, Network_Marketing_Name, Prime_Benefit_Plan_Status,
  Create_Date, Submit_Date, Certified_Date, Column_Name, Column_Value,
  Sys_Of_Rec_Cd, Src_Sys_Cd, Crt_Rec_Sys_Tms, Upd_Rec_Sys_Tms,
  Row_Actn_Cd, Row_Reprcs_Flg, Row_Rej_Flg, Prcs_Id, Audit_Row_Id, Hash_Key, Bus_Dt
FROM _to_insert_extract;

SET extract_rows_inserted = extract_rows_delta;

-- Audit row for Hop 2
INSERT INTO `dev-edap.BET_DIST.BET_Extract_Dim_Dhan_Load_Audit`
SELECT
  run_ts,
  wm_extract_before,
  extract_rows_delta,
  extract_rows_inserted,
  IF(extract_rows_inserted > 0, 'SUCCESS', 'ZERO_DELTA') AS status,
  IF(extract_rows_inserted > 0, NULL, 'No new rows since last watermark') AS note;

-- ---------------------------------------------------------------------
-- Optional summary output (handy in Job Results)
-- ---------------------------------------------------------------------
SELECT
  'FILES_DHAN' AS stage,
  files_rows_delta AS rows_detected_delta,
  files_rows_inserted AS rows_inserted,
  wm_files_before AS watermark_before
UNION ALL
SELECT
  'EXTRACT_DHAN',
  extract_rows_delta,
  extract_rows_inserted,
  wm_extract_before;
